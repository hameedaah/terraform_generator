from google import genai


client = genai.Client()

response = client.models.generate_content(
    model='gemini-2.0-flash-001', contents='Why is the sky blue?'
)
print(response.text)

def generate_terraform_script(user_prompt: str) -> str:
    """
    Uses the Gemini API to parse a natural language prompt and generate a
    Terraform script based on a structured JSON response.
    """
    model = GenerativeModel(model_name="gemini-2.5-flash-preview-05-20")


    system_prompt = f"""
        You are a professional Terraform infrastructure-as-code generator.
        The user will provide a natural language description of an AWS resource they want to create.
        Your task is to identify the resource type and extract all relevant attributes from the prompt.
        You must return a JSON object that strictly adheres to the provided schema.
        If a resource is not supported, return an empty object.
        
        Supported resources and their attributes:
        - aws_s3_bucket: {{ "bucket_name": "string", "acl": "string" }}
        - aws_instance: {{ "instance_name": "string", "ami_id": "string", "instance_type": "string" }}
    """
    
    
    response_schema = {
        "type": "OBJECT",
        "properties": {
            "resource_type": {"type": "STRING"},
            "attributes": {"type": "OBJECT", "additionalProperties": {"type": "STRING"}}
        },
        "propertyOrdering": ["resource_type", "attributes"]
    }
    
    # Configure the generation to enforce the JSON schema
    generation_config = GenerationConfig(
        response_mime_type="application/json",
        response_schema=response_schema
    )

    try:
        # Construct the full prompt and send it to the model.
        full_prompt = f"{system_prompt}\n\nUser request: {user_prompt}"
        response = model.generate_content(
            contents=[{"role": "user", "parts": [{"text": full_prompt}]}],
            generation_config=generation_config
        )

        # The model returns a JSON string, which we need to parse.
        json_string = response.text
        parsed_data = json.loads(json_string)
        resource_type = parsed_data.get("resource_type")
        attributes = parsed_data.get("attributes", {})

        if resource_type == "aws_s3_bucket":
            bucket_name = attributes.get("bucket_name", "my-generated-bucket")
            return f"""
                resource "aws_s3_bucket" "{bucket_name}" {{
                bucket = "{bucket_name}"
                acl    = "private"
                
                tags = {{
                    Name        = "{bucket_name}"
                    Environment = "Generated by Gemini API"
                }}
                }}
            """
        elif resource_type == "aws_instance":
            instance_name = attributes.get("instance_name", "my-generated-ec2")
            ami = attributes.get("ami_id", "ami-0c55b159cbfafe1f0")
            instance_type = attributes.get("instance_type", "t2.micro")
            return f"""
            resource "aws_instance" "{instance_name}" {{
            ami           = "{ami}"
            instance_type = "{instance_type}"

            tags = {{
                Name = "{instance_name}"
            }}
            }}
            """
        else:
            return '# No matching Terraform resource found for your request.'

    except Exception as e:
        print(f"An error occurred: {e}")
        return '# An error occurred while generating the script. Please try again.'




import os
import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.responses import PlainTextResponse
from pydantic import BaseModel
from typing import Dict, Any



def generate_terraform_script(resource_type: str, attributes: Dict[str, Any]) -> str:
    """
    Generates a Terraform script based on a structured resource type and attributes.
    This function no longer uses a language model, but directly processes the input.
    """
    # Use the parsed data to generate the final Terraform code string.
    if resource_type == "aws_s3_bucket":
        # Get attributes with default values for robustness
        bucket_name = attributes.get("bucket_name", "my-generated-bucket")
        acl = attributes.get("acl", "private")
        
        return f"""
            resource "aws_s3_bucket" "{bucket_name}" {{
            bucket = "{bucket_name}"
            acl    = "{acl}"
            
            tags = {{
                Name        = "{bucket_name}"
                Environment = "Generated by API"
            }}
            }}
        """
    elif resource_type == "aws_instance":
        # Get attributes with default values for robustness
        instance_name = attributes.get("instance_name", "my-generated-ec2")
        ami = attributes.get("ami_id", "ami-0c55b159cbfafe1f0")
        instance_type = attributes.get("instance_type", "t2.micro")

        return f"""
            resource "aws_instance" "{instance_name}" {{
            ami           = "{ami}"
            instance_type = "{instance_type}"

            tags = {{
                Name = "{instance_name}"
            }}
            }}
        """
    else:
        return '# No matching Terraform resource found for your request.'

